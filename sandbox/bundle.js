var GM;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GrowMap": () => (/* binding */ GrowMap)
/* harmony export */ });
var GrowMap = /** @class */ (function () {
    function GrowMap(container, things) {
        var _this = this;
        this.prepareThing = function (thing, i) {
            var preparedThing = {
                name: thing.name,
                position: {
                    x: 0,
                    y: 0,
                },
                size: {
                    width: null,
                    height: null,
                    fontSize: null,
                    padding: null,
                }
            };
            // Вычисляем ширину и высоту
            var thingSize = _this.getThingSize(thing);
            preparedThing.size = {
                width: thingSize.width,
                height: thingSize.height,
                fontSize: thingSize.fontSize,
                padding: thingSize.padding,
            };
            if (i === 0) {
                // preparedThing.position.x = things[0].position.x + things[0].size.width + this.params.globPadding;
            }
            // Нужно вычислить положение блока - но вычислить его можно токло после того как у предыдущего элемента есть ширина и высота
            // Что бы вычислить ширину и высоту нужно посчитать
            if (i !== 0) {
                preparedThing.position.x = 0;
                preparedThing.position.y = 0;
            }
            if (thing.children) {
                preparedThing.children = thing.children.map(function (thing, i) {
                    return _this.prepareThing(thing, i);
                });
            }
            return preparedThing;
        };
        this.prepareThings = function () {
            var things = _this.things;
            _this.preparedThings = things.map(_this.prepareThing);
            console.log('Things are prepared.');
        };
        this.init = function () {
            console.log('App initialization is started.');
            _this.canvas = document.createElement('canvas');
            _this.ctx = _this.canvas.getContext('2d');
            _this.prepareThings();
            var w = _this.container.clientWidth;
            var h = _this.container.clientHeight;
            _this.canvas.width = w;
            _this.canvas.height = h;
            _this.container.appendChild(_this.canvas);
            _this.ctx.translate(_this.canvas.width / 2, _this.canvas.height / 2);
            var observedContainerData = {
                previousWidth: null,
                previousHeight: null,
            };
            var containerResizeObserver = new ResizeObserver(function (entries) {
                if (!!(observedContainerData.previousWidth && observedContainerData.previousHeight) &&
                    ((entries[0].contentRect.width !== observedContainerData.previousWidth) ||
                        (entries[0].contentRect.height !== observedContainerData.previousHeight))) {
                    console.warn('Container size is changed - reload the app.');
                    containerResizeObserver.unobserve(_this.container);
                    _this.reload();
                }
                observedContainerData.previousWidth = entries[0].contentRect.width;
                observedContainerData.previousHeight = entries[0].contentRect.height;
            });
            containerResizeObserver.observe(_this.container);
            console.log('App is started.');
            window.requestAnimationFrame(function () {
                _this.drawBG();
                _this.drawRectangle(_this.preparedThings[0]);
            });
        };
        this.reload = function () {
            console.log('App reload is started.');
            _this.container.innerHTML = '';
            _this.init();
        };
        this.getThingSize = function (thing) {
            var fontSize = _this.params.fontSize;
            var textMetrics = _this.getTextSize(thing.name, fontSize);
            var p = fontSize / 4;
            var rectW = (p + textMetrics.width + p);
            var rectH = (p + _this.params.fontSize + p);
            return {
                fontSize: fontSize,
                width: rectW,
                height: rectH,
                padding: p,
            };
        };
        this.drawRectangle = function (thing) {
            _this.ctx.fillStyle = _this.params.rectColor;
            _this.ctx.fillRect(thing.position.x, thing.position.y, thing.size.width, thing.size.height);
            _this.drawText(thing.name, thing.position.x + thing.size.padding, thing.position.y + (thing.size.padding / 2) + thing.size.fontSize);
        };
        this.getTextSize = function (text, fontSize) {
            var previousFont = _this.ctx.font;
            _this.ctx.font = "".concat(fontSize, "px serif");
            var measuredText = _this.ctx.measureText(text);
            _this.ctx.font = previousFont;
            return measuredText;
        };
        this.drawText = function (text, x, y) {
            _this.ctx.font = "".concat(_this.params.fontSize, "px serif");
            _this.ctx.fillStyle = _this.params.fontColor;
            _this.ctx.fillText(text, x, y);
        };
        this.drawBG = function () {
            _this.ctx.fillStyle = _this.params.bgColor;
            _this.ctx.fillRect(-(_this.canvas.width / 2), -(_this.canvas.height / 2), _this.canvas.width, _this.canvas.height);
        };
        this.container = container;
        this.ctx = null;
        this.params = {
            bgColor: 'skyblue',
            fontSize: 160,
            fontColor: 'red',
            rectColor: 'white',
            globPadding: 20,
        };
        this.things = things;
        this.preparedThings = null;
    }
    return GrowMap;
}());


GM = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,