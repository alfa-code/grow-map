var GM;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GrowMap": () => (/* binding */ GrowMap)
/* harmony export */ });
var GrowMap = /** @class */ (function () {
    function GrowMap(container, things) {
        var _this = this;
        this.prepareThings = function () {
            var things = _this.things;
            function prepareThing(thing, i) {
                var preparedThing = {
                    name: thing.name,
                    position: {
                        x: 0,
                        y: 0,
                    }
                };
                // Вычисляем ширину и высоту
                // Нужно вычислить положение блока - но вычислить его можно токло после того как у предыдущего элемента есть ширина и высота
                // Что бы вычислить ширину и высоту нужно посчитать
                if (i !== 0) {
                    preparedThing.position.x = 0;
                    preparedThing.position.y = 0;
                }
                if (thing.children) {
                    preparedThing.children = thing.children.map(prepareThing);
                }
                return preparedThing;
            }
            _this.preparedThings = things.map(prepareThing);
            console.log('Things are prepared.');
        };
        this.init = function () {
            _this.prepareThings();
            console.log('App initialization is started.');
            _this.canvas = document.createElement('canvas');
            _this.ctx = _this.canvas.getContext('2d');
            var w = _this.container.clientWidth;
            var h = _this.container.clientHeight;
            _this.canvas.width = w;
            _this.canvas.height = h;
            _this.container.appendChild(_this.canvas);
            // this.ctx.translate(10, 10);
            _this.ctx.translate(_this.canvas.width / 2, _this.canvas.height / 2);
            var observedContainerData = {
                previousWidth: null,
                previousHeight: null,
            };
            var containerResizeObserver = new ResizeObserver(function (entries) {
                if (!!(observedContainerData.previousWidth && observedContainerData.previousHeight) &&
                    ((entries[0].contentRect.width !== observedContainerData.previousWidth) ||
                        (entries[0].contentRect.height !== observedContainerData.previousHeight))) {
                    console.warn('Container size is changed - reload the app.');
                    containerResizeObserver.unobserve(_this.container);
                    _this.reload();
                }
                observedContainerData.previousWidth = entries[0].contentRect.width;
                observedContainerData.previousHeight = entries[0].contentRect.height;
            });
            containerResizeObserver.observe(_this.container);
            console.log('App is started.');
            window.requestAnimationFrame(function () {
                _this.drawBG();
                _this.drawRectangle({ name: '32523523523523523 \n\n 5235235235235235' });
            });
        };
        this.reload = function () {
            console.log('App reload is started.');
            _this.container.innerHTML = '';
            _this.init();
        };
        this.getThingSize = function (thing) {
            var fontSize = 16;
            var textMetrics = _this.getTextSize(thing.name, fontSize);
            var p = fontSize / 4;
            var rectW = (p + textMetrics.width + p);
            var rectH = (p + _this.params.fontSize + p);
            return {
                fontSize: fontSize,
                width: 100,
                height: 100,
            };
        };
        this.drawRectangle = function (thing) {
            _this.params.fontSize = 20;
            var textMetrics = _this.getTextSize(thing.name, 60);
            console.log('textMetrics:', textMetrics);
            _this.ctx.fillStyle = _this.params.rectColor;
            var p = _this.params.fontSize / 4;
            var rectW = (textMetrics.width + p);
            var rectH = (_this.params.fontSize + p);
            _this.ctx.fillRect(0, 0, rectW, rectH);
            _this.drawText(thing.name, 10, (10 + _this.params.fontSize));
        };
        this.getTextSize = function (text, fontSize) {
            var previousFont = _this.ctx.font;
            _this.ctx.font = "".concat(fontSize, "px serif");
            var measuredText = _this.ctx.measureText(text);
            _this.ctx.font = previousFont;
            return measuredText;
        };
        this.drawText = function (text, x, y) {
            _this.ctx.font = "".concat(_this.params.fontSize, "px serif");
            _this.ctx.fillStyle = _this.params.fontColor;
            _this.ctx.fillText(text, x, y);
        };
        this.drawBG = function () {
            _this.ctx.fillStyle = _this.params.bgColor;
            _this.ctx.fillRect(-(_this.canvas.width / 2), -(_this.canvas.height / 2), _this.canvas.width, _this.canvas.height);
        };
        this.container = container;
        this.params = {
            bgColor: 'skyblue',
            fontSize: 40,
            fontColor: 'red',
            rectColor: 'white',
        };
        this.things = things;
        this.preparedThings = null;
    }
    return GrowMap;
}());


GM = __webpack_exports__;
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,